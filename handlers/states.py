# -*- coding: utf-8 -*-

from re import L
from aiogram import types
from aiogram.dispatcher import FSMContext

from loader import dp, _
from database import account_api, invest_api
from statesgroup import BuyInvest, OutInvest, ToUpBallance
from keyboards import reply


@dp.message_handler(text=_("–ù–∞–∑–∞–¥"), state='*')
async def back_to_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        text=_("üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        reply_markup=reply.main_menu(),
    )


@dp.message_handler(text=_("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), state=OutInvest.confirm_out)
async def confirm_out(message: types.Message, state: FSMContext):
    async with state.proxy as data:
        record_id = data['record_id']

    record = await invest_api.get_invest_record(record_id)
    print(record)

@dp.message_handler(state=BuyInvest.get_amount)
async def get_amount_invest(message: types.Message, state: FSMContext):
    account = await account_api.get_account(message.from_user.id)

    try:
        amount = float(message.text)
    except ValueError:
        await message.answer(
            text=_("–í–∞–º —Å—Ç–æ–∏—Ç –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ"),
        )
        return
    
    if amount < 100:
        await message.answer(
            text=_("‚ö†Ô∏è–û—à–∏–±–∫–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ 100.00 USD"),
        )
        return
    
    if amount > account.ballance:
        await message.answer(
            text=_("‚ö†Ô∏è–û—à–∏–±–∫–∞: –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"),
            reply_markup=reply.main_menu(),
        )
        await state.finish()
        return

    async with state.proxy() as data:
        data['amount'] = amount
    
    await BuyInvest.confirm_buy.set()
    await message.answer(
        text=_(f"–í—ã —Å–æ–≤–µ—Ä—à–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount} USD"),
        reply_markup=reply.confirm_buy(),
    )

@dp.message_handler(state=BuyInvest.confirm_buy, text=_("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É"))
async def confirm_buy(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        amount = data['amount']

    account = await account_api.get_account(message.from_user.id)
    await account_api.update_ballance(
        user_id=account.user_id, 
        new_amount=account.ballance - amount,
    )
    await invest_api.create_record(
        user_id=message.from_user.id,
        amount=amount
    )
    await message.answer(
        text=_(
            "‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. " +\
            "–ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∏–≤–∏–¥–µ–Ω–¥—ã."
        ),
        reply_markup=reply.main_menu(),
    )

    await state.finish()


@dp.message_handler(state=ToUpBallance.get_amount)
async def get_amount_ballance(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer(
            text=_("–í–∞–º —Å—Ç–æ–∏—Ç –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ"),
        )
        return
    
    account = await account_api.get_account(message.from_user.id)
    await account_api.update_ballance(
        user_id=account.user_id, 
        new_amount=account.ballance + amount,
    )

    await message.answer(
        text=_("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω."),
        reply_markup=reply.main_menu(),
    )
    await state.finish()