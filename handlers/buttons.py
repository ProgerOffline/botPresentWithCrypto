# -*- coding: utf-8 -*-

from aiogram import types
from loader import dp, bot, _

from keyboards import reply, inline
from database import account_api, invest_api, referer_api
from statesgroup import BuyInvest, ToUpBallance, NFT


@dp.message_handler(text=_("Foxverse"))
async def show_foxverse(message: types.Message):
    await message.answer(
        text="FOXVERSE is a next generation metaverse platform" +\
             "by Hong Kong based Neowiz Play Studio Hong Kong Limited.",
        reply_markup=inline.foxverse_menu()
    )


@dp.message_handler(text=_("–ú–æ–π –ë–∞–ª–∞–Ω—Å"))
async def show_ballance(message: types.Message):
    account = await account_api.get_account(message.from_user.id)

    await message.answer(
        text=_(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {account.ballance} USD"),
    )


@dp.message_handler(text=_("–ü—Ä–æ—Ñ–∏–ª—å"))
async def show_account(message: types.Message):
    account = await account_api.get_account(message.from_user.id)
    account.referer_id = "–ù–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä–∞" \
        if account.referer_id == 0 \
        else account.referer_id

    await message.answer(
        text=_(
            f"–ò–º—è: {account.first_name}\n" +\
            f"–§–∞–º–∏–ª–∏—è: {account.last_name}\n" +\
            f"ID: {account.id}\n" +\
            f"ID –°–ø–æ–Ω—Å–æ—Ä–∞: {account.referer_id} \n" +\
            f"–ö–æ—à–µ–ª–µ–∫: {account.wallet}\n" +\
            f"–ö–æ—à–µ–ª–µ–∫ PM: {account.wallet_pm}\n" +\
            f"–ö–æ—à–µ–ª–µ–∫ BTC: {account.wallet_crypto}\n" +\
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {account.auth_date}\n"
        ),
        reply_markup=reply.main_menu(),
    )


@dp.message_handler(text=_("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"))
async def invest_product(message: types.Message):
    await message.answer(
        text=_(
            "–ï–ñ–ï–î–ù–ï–í–ù–´–ô –î–û–•–û–î:\n" + \
            "   üî∏–ê–ø—Ä–µ–ª—å - 2% –≤ –¥–µ–Ω—å\n" + \
            "   üî∏–ú–∞–π - 3% –≤ –¥–µ–Ω—å\n" + \
            "   üî∏–ò—é–Ω—å - 4% –≤ –¥–µ–Ω—å\n" + \
            "   üî∏–ò—é–ª—å - 5% –≤ –¥–µ–Ω—å\n" + \
            "   üî∏–ê–≤–≥—É—Å—Ç - 6% –≤ –¥–µ–Ω—å\n\n" + \
            "‚ñ™Ô∏è–°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç 100.00 USD\n" + \
            "‚ñ™Ô∏è–ü–æ–∫—É–ø–∫–∞: BTC / ETH / LTC / BCH / USDT TRC20 / TRX / BNB / Perfect Money\n" + \
            "‚ñ™Ô∏è–í—ã–≤–æ–¥ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤:  USDT TRC20 –∏ Perfect Money (–º–∏–Ω. —Å—É–º–º–∞ 10.00 USD)\n" + \
            "‚ñ™Ô∏è–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –¥–æ 200% –ø—Ä–æ—Ñ–∏—Ç–∞ (ROI 300%)\n" + \
            "‚ñ™Ô∏è–í—ã–≤–æ–¥ —Ç–µ–ª–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å –∫–æ–º–∏—Å—Å–∏–µ–π 20%. –ò–ª–∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 200% –ø—Ä–∏–±—ã–ª–∏.\n"
        ),
        reply_markup=reply.buy_invest(),
    )


@dp.message_handler(text=_("NFT"))
async def buy_invest(message: types.Message):
    await message.answer(
        text=_("üóÉ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"),
        reply_markup=reply.nft_menu(),
    )


@dp.message_handler(text=_("–ö—É–ø–∏—Ç—å"))
async def buy_invest(message: types.Message):
    await BuyInvest.get_amount.set()
    await message.answer(
        text=_("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ USD"),
        reply_markup=reply.back_to_menu(),
    )


@dp.message_handler(text=_("NFT Self-Minting"))
@dp.message_handler(text=_("NFT Market"))
async def show_nft_menu(message: types.Message):
    await NFT.back_to_nft_menu.set()
    await message.answer(
        text=_("üîú Will be available in Q2 2022"),
        reply_markup=reply.back_to_menu(),
    )


@dp.message_handler(text=_("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def support(message: types.Message):
    await message.answer(
        text=_("üë©‚Äçüíª –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à—É —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É @crptxprt"),
        reply_markup=reply.back_to_menu(),
    )


@dp.message_handler(text=_("–í—ã—Ö–æ–¥"))
async def logout(message: types.Message):
    if_exist = await account_api.get_account(message.from_user.id)
    
    await message.answer(
        text=_("üôèüèª –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –ú—ã –∂–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞"),
        reply_markup=reply.authorization(if_exist),
    )


@dp.message_handler(text=_("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
async def to_up_ballance(message: types.Message):
    await ToUpBallance.get_amount.set()
    await message.answer(
        text=_("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD"),
        reply_markup=reply.back_to_menu(),
    )


@dp.message_handler(text=_("–ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"))
async def show_invest_list(message: types.Message):
    records = await invest_api.get_user_records(message.from_user.id)
    
    if len(records) <= 0:
        await message.answer(
            text=_("üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
        )
        return

    content = [
        _(
            f"üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {record.amount} USD " +\
            f"–æ—Ç {record.date}. –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {record.count_precent}"+\
            f"/ {record.amount}$"
        )
        for record in records
    ]

    await message.answer(
        text="\n".join(content),
    )


@dp.message_handler(text=_("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"))
async def referal_program(message: types.Message):
    invest_records = await invest_api.get_user_records(message.from_user.id)

    if len(invest_records) <= 0:
        await message.answer(
            text=_(
                "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, " +\
                "–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"
            ),
        )
        return
    
    bot_info = await bot.get_me()
    account = await account_api.get_account(message.from_user.id)
    await message.answer(
        text=_(
            "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/" + \
            f"{bot_info.username}?start=referer_{account.id}",
        ),
        reply_markup=reply.referal_program(),
    )


@dp.message_handler(text=_("–ú–æ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"))
async def show_referal_structure(message: types.Message):
    account = await account_api.get_account(message.from_user.id)
    account_referers = await referer_api.get_all_referers(
        account_id=account.id,
    )

    account_active_referers = await referer_api.get_all_referers(
        account_id=account.id,
        only_active=True,
    )

    amount_referers_investition = await referer_api.get_amount_investition(
        referers=account_active_referers,
    )

    await message.answer(
        text=_(
            f"üìà –í–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞\n" + \
            f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(account_referers)}\n" +\
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(account_active_referers)}\n" +\
            f"–í—Å–µ–≥–æ –æ–±–æ—Ä–æ—Ç: {amount_referers_investition} USD\n" +\
            f"–î–æ—Ö–æ–¥: {account.referer_income} USD\n" 
        ),
        reply_markup=inline.referers_levels(),
    )


@dp.message_handler(text=_("–í—ã–≤–æ–¥ —Ç–µ–ª–∞ –¥–µ–ø–æ–∑–∏—Ç–∞"))
async def out_body_invest(message: types.Message):
    records = await invest_api.get_user_records(message.from_user.id)

    await message.answer(
        text=_("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–ª–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:"),
        reply_markup=inline.out_invest_records(records),
    )